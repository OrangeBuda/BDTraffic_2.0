import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}
import org.apache.spark.sql.types._


case class BusTrip(latitude: Float,
                   longitude: Float,
                   timeReceived: String,
                   vehicleId: String,
                   distanceAlongTrip: Float,
                   inferredDirectionId: Int,
                   inferredPhase: String,
                   inferredRouteId: String,
                   inferredTripId: String,
                   nextScheduledStopDistance: Float,
                   nextScheduledStopId: String
                  )
object BatchLayer {

  def main(args: Array[String]): Unit = {

    val spark = SparkSession.builder
      .appName("BatchLayer")  // optional and will be autogenerated if not specified
      .master("local[4]")               // only for demo and testing purposes, use spark-submit instead
      .getOrCreate()

    import spark.implicits._

    val schema = new StructType()
      .add("latitude", FloatType)
      .add("longitude",FloatType)
      .add("timeReceived",TimestampType)
      .add("vehicleId",StringType)
      .add("distanceAlongTrip",FloatType)
      .add("inferredDirectionId",IntegerType)
      .add("inferredPhase",StringType)
      .add("inferredRouteId",StringType)
      .add("inferredTripId",StringType)
      .add("nextScheduledStopDistance",FloatType)
      .add("nextScheduledStopId",StringType)

    val path= "D:\\mta_data\\MTA-Bus-Time_.2014-08-01.csv"
    val mtaCsv= spark
        .read
        .option("header", true)
        .option("delimiter","\t")
        .schema(schema)
        .csv(path)
        .as[BusTrip]

    mtaCsv.show(10)

    spark.stop()

  }


}
